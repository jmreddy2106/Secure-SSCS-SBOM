{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Secure Software Supply Chain Security using SBOM Welcome to the documentation for GitHub SBOM Fetcher . This project automates the process of fetching Software Bill of Materials (SBOM) data for repositories from GitHub, storing the data in a PostgreSQL database, and handling rate limits effectively. Table of Contents Introduction Installation Configuration Usage APIs Database Schema Error Handling Contributing License","title":"Home"},{"location":"#secure-software-supply-chain-security-using-sbom","text":"Welcome to the documentation for GitHub SBOM Fetcher . This project automates the process of fetching Software Bill of Materials (SBOM) data for repositories from GitHub, storing the data in a PostgreSQL database, and handling rate limits effectively.","title":"Secure Software Supply Chain Security using SBOM"},{"location":"#table-of-contents","text":"Introduction Installation Configuration Usage APIs Database Schema Error Handling Contributing License","title":"Table of Contents"},{"location":"api/","text":"GitHub APIs Used The script interacts with the following GitHub API endpoints: 1. List Repositories Endpoint : GET /users/{GITHUB_OWNER}/repos Purpose : Fetch all repositories owned by the user or organization. Example : curl -H \"Authorization: token YOUR_TOKEN\" https://api.github.com/users/YOUR_USERNAME/repos 2. Repository Contents Endpoint: GET /repos/{GITHUB_OWNER}/{repo_name}/contents Purpose: Fetch the contents of a specific repository to check for package.json or requirements.txt . 3. SBOM Data Endpoint: GET /repos/{GITHUB_OWNER}/{repo_name}/dependency-graph/sbom Purpose: Fetch the SBOM data for a specific repository. 4. Rate Limit Endpoint: GET /rate_limit Purpose: Check the remaining API request limit for the current GitHub token. Previous: APIs | Next: Database","title":"APIs"},{"location":"api/#github-apis-used","text":"The script interacts with the following GitHub API endpoints:","title":"GitHub APIs Used"},{"location":"api/#1-list-repositories","text":"Endpoint : GET /users/{GITHUB_OWNER}/repos Purpose : Fetch all repositories owned by the user or organization. Example : curl -H \"Authorization: token YOUR_TOKEN\" https://api.github.com/users/YOUR_USERNAME/repos","title":"1. List Repositories"},{"location":"api/#2-repository-contents","text":"Endpoint: GET /repos/{GITHUB_OWNER}/{repo_name}/contents Purpose: Fetch the contents of a specific repository to check for package.json or requirements.txt .","title":"2. Repository Contents"},{"location":"api/#3-sbom-data","text":"Endpoint: GET /repos/{GITHUB_OWNER}/{repo_name}/dependency-graph/sbom Purpose: Fetch the SBOM data for a specific repository.","title":"3. SBOM Data"},{"location":"api/#4-rate-limit","text":"Endpoint: GET /rate_limit Purpose: Check the remaining API request limit for the current GitHub token. Previous: APIs | Next: Database","title":"4. Rate Limit"},{"location":"configuration/","text":"Configurations The script uses environment variables to configure settings like the GitHub owner, token, and database connection string. .env File Setup Create a .env file in the root directory of your project with the following variables: GITHUB_OWNER = your_github_username GITHUB_TOKEN = your_github_personal_access_token DB_CONNECTION = postgres://username:password@localhost:5432/mydatabase Explanation of Variables GITHUB_OWNER: GitHub username or organization name. GITHUB_TOKEN: Personal access token for authentication with GitHub. DB_CONNECTION: PostgreSQL connection string, including credentials.","title":"Configuration"},{"location":"configuration/#configurations","text":"The script uses environment variables to configure settings like the GitHub owner, token, and database connection string.","title":"Configurations"},{"location":"configuration/#env-file-setup","text":"Create a .env file in the root directory of your project with the following variables: GITHUB_OWNER = your_github_username GITHUB_TOKEN = your_github_personal_access_token DB_CONNECTION = postgres://username:password@localhost:5432/mydatabase","title":".env File Setup"},{"location":"configuration/#explanation-of-variables","text":"GITHUB_OWNER: GitHub username or organization name. GITHUB_TOKEN: Personal access token for authentication with GitHub. DB_CONNECTION: PostgreSQL connection string, including credentials.","title":"Explanation of Variables"},{"location":"contributing/","text":"Contributing We welcome contributions to improve this project! Steps to Contribute Fork the repository. Create a new branch for your feature or fix: git checkout -b my-feature Commit your changes: git commit -m \"add my feature\" Push your branch: git push origin my-feature Open a pull request on GitHub. Guidelines Write clear commit messages. Follow the coding style used in the project. Ensure your changes do not break existing functionality.","title":"Contributing"},{"location":"contributing/#contributing","text":"We welcome contributions to improve this project!","title":"Contributing"},{"location":"contributing/#steps-to-contribute","text":"Fork the repository. Create a new branch for your feature or fix: git checkout -b my-feature Commit your changes: git commit -m \"add my feature\" Push your branch: git push origin my-feature Open a pull request on GitHub.","title":"Steps to Contribute"},{"location":"contributing/#guidelines","text":"Write clear commit messages. Follow the coding style used in the project. Ensure your changes do not break existing functionality.","title":"Guidelines"},{"location":"database_schema/","text":"Database Schema The script uses a PostgreSQL database to store SBOM data. Table: sbom_data Column Name Data Type Description id SERIAL Primary key repo_owner VARCHAR(500) Repository owner's GitHub handle reponame VARCHAR(500) Name of the GitHub repository sbom JSONB SBOM data in JSON format created_at TIMESTAMP Timestamp when the record was created SQL Query to Create Table CREATE TABLE sbom_data ( id SERIAL PRIMARY KEY , repo_owner VARCHAR ( 500 ) NOT NULL , reponame VARCHAR ( 500 ) NOT NULL , sbom JSONB NOT NULL , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); Table: Vulnerabilities The vulnerabilities table stores information about vulnerabilities detected in specific repositories and their associated packages. Each column in the table is described below: Column Name Data Type Constraints Description id SERIAL PRIMARY KEY A unique identifier for each record in the table. Automatically generated. repo_name VARCHAR(255) NOT NULL The name of the repository where the vulnerability was detected. package VARCHAR(255) NOT NULL The name of the package in which the vulnerability exists. version VARCHAR(50) NOT NULL The version of the package where the vulnerability was identified. ecosystem VARCHAR(50) NOT NULL The ecosystem or package manager (e.g., npm, PyPI, Maven) of the package. vulnerability_id VARCHAR(100) NOT NULL A unique identifier for the vulnerability (e.g., CVE ID). severity_type VARCHAR(50) NOT NULL The type of severity (e.g., CVSS). severity_score FLOAT NOT NULL The numerical severity score (e.g., CVSS score). severity_level VARCHAR(20) NOT NULL The categorized severity level (e.g., Low, Medium, High). summary TEXT A textual summary describing the vulnerability. Unique Constraint UNIQUE(repo_name, package, version, vulnerability_id) Ensures that no duplicate entries exist for the same package vulnerability within a repository. SQL Query to Create Table CREATE TABLE vulnerabilities ( id SERIAL PRIMARY KEY , repo_name VARCHAR ( 255 ) NOT NULL , package VARCHAR ( 255 ) NOT NULL , version VARCHAR ( 50 ) NOT NULL , ecosystem VARCHAR ( 50 ) NOT NULL , vulnerability_id VARCHAR ( 100 ) NOT NULL , severity_type VARCHAR ( 50 ) NOT NULL , severity_score FLOAT NOT NULL , severity_level VARCHAR ( 20 ) NOT NULL , summary TEXT , UNIQUE ( repo_name , package , version , vulnerability_id ) );","title":"Database Schema"},{"location":"database_schema/#database-schema","text":"The script uses a PostgreSQL database to store SBOM data.","title":"Database Schema"},{"location":"database_schema/#table-sbom_data","text":"Column Name Data Type Description id SERIAL Primary key repo_owner VARCHAR(500) Repository owner's GitHub handle reponame VARCHAR(500) Name of the GitHub repository sbom JSONB SBOM data in JSON format created_at TIMESTAMP Timestamp when the record was created","title":"Table: sbom_data"},{"location":"database_schema/#sql-query-to-create-table","text":"CREATE TABLE sbom_data ( id SERIAL PRIMARY KEY , repo_owner VARCHAR ( 500 ) NOT NULL , reponame VARCHAR ( 500 ) NOT NULL , sbom JSONB NOT NULL , created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP );","title":"SQL Query to Create Table"},{"location":"database_schema/#table-vulnerabilities","text":"The vulnerabilities table stores information about vulnerabilities detected in specific repositories and their associated packages. Each column in the table is described below: Column Name Data Type Constraints Description id SERIAL PRIMARY KEY A unique identifier for each record in the table. Automatically generated. repo_name VARCHAR(255) NOT NULL The name of the repository where the vulnerability was detected. package VARCHAR(255) NOT NULL The name of the package in which the vulnerability exists. version VARCHAR(50) NOT NULL The version of the package where the vulnerability was identified. ecosystem VARCHAR(50) NOT NULL The ecosystem or package manager (e.g., npm, PyPI, Maven) of the package. vulnerability_id VARCHAR(100) NOT NULL A unique identifier for the vulnerability (e.g., CVE ID). severity_type VARCHAR(50) NOT NULL The type of severity (e.g., CVSS). severity_score FLOAT NOT NULL The numerical severity score (e.g., CVSS score). severity_level VARCHAR(20) NOT NULL The categorized severity level (e.g., Low, Medium, High). summary TEXT A textual summary describing the vulnerability. Unique Constraint UNIQUE(repo_name, package, version, vulnerability_id) Ensures that no duplicate entries exist for the same package vulnerability within a repository.","title":"Table: Vulnerabilities"},{"location":"database_schema/#sql-query-to-create-table_1","text":"CREATE TABLE vulnerabilities ( id SERIAL PRIMARY KEY , repo_name VARCHAR ( 255 ) NOT NULL , package VARCHAR ( 255 ) NOT NULL , version VARCHAR ( 50 ) NOT NULL , ecosystem VARCHAR ( 50 ) NOT NULL , vulnerability_id VARCHAR ( 100 ) NOT NULL , severity_type VARCHAR ( 50 ) NOT NULL , severity_score FLOAT NOT NULL , severity_level VARCHAR ( 20 ) NOT NULL , summary TEXT , UNIQUE ( repo_name , package , version , vulnerability_id ) );","title":"SQL Query to Create Table"},{"location":"error_handling/","text":"Error Handling The script handles various error scenarios: 1. Rate Limits Cause : Exceeding GitHub's API rate limits. Solution : The script waits until the rate limit resets before retrying. 2. API Errors Cause : Invalid API requests (e.g., 404, 403). Solution : Logs the error and continues with other repositories. 3. Database Errors Cause : Issues with PostgreSQL connection or table. Solution : Logs the error message. Ensure the DB_CONNECTION is valid.","title":"Error Handling"},{"location":"error_handling/#error-handling","text":"The script handles various error scenarios:","title":"Error Handling"},{"location":"error_handling/#1-rate-limits","text":"Cause : Exceeding GitHub's API rate limits. Solution : The script waits until the rate limit resets before retrying.","title":"1. Rate Limits"},{"location":"error_handling/#2-api-errors","text":"Cause : Invalid API requests (e.g., 404, 403). Solution : Logs the error and continues with other repositories.","title":"2. API Errors"},{"location":"error_handling/#3-database-errors","text":"Cause : Issues with PostgreSQL connection or table. Solution : Logs the error message. Ensure the DB_CONNECTION is valid.","title":"3. Database Errors"},{"location":"installation/","text":"Installation Prerequisites Python 3.x installed on your system. PostgreSQL database instance available. A GitHub personal access token with the required scopes ( repo and read:packages ). Steps to Install Clone the repository: git clone https://github.com/username/repository-name.git cd repository-name/python ` stall dependencies: pip install -r requirements.txt Create a .env file in the root directory and configure it as shown in the Configuration section. Run the following command to create the database schema and populate it with data: python sbom_fetcher.py","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#prerequisites","text":"Python 3.x installed on your system. PostgreSQL database instance available. A GitHub personal access token with the required scopes ( repo and read:packages ).","title":"Prerequisites"},{"location":"installation/#steps-to-install","text":"Clone the repository: git clone https://github.com/username/repository-name.git cd repository-name/python ` stall dependencies: pip install -r requirements.txt Create a .env file in the root directory and configure it as shown in the Configuration section. Run the following command to create the database schema and populate it with data: python sbom_fetcher.py","title":"Steps to Install"},{"location":"introduction/","text":"Introduction This Python script automates the process of fetching Software Bill of Materials (SBOM) data for repositories from GitHub, storing the data in a PostgreSQL database, and handling rate limits effectively. Key Features Fetch SBOM for repositories containing package.json or requirements.txt . Store SBOM data in a PostgreSQL database for analysis. Handles GitHub API rate limits with retries. Uses asynchronous programming for efficient GitHub API interaction.","title":"Introduction"},{"location":"introduction/#introduction","text":"This Python script automates the process of fetching Software Bill of Materials (SBOM) data for repositories from GitHub, storing the data in a PostgreSQL database, and handling rate limits effectively.","title":"Introduction"},{"location":"introduction/#key-features","text":"Fetch SBOM for repositories containing package.json or requirements.txt . Store SBOM data in a PostgreSQL database for analysis. Handles GitHub API rate limits with retries. Uses asynchronous programming for efficient GitHub API interaction.","title":"Key Features"},{"location":"license/","text":"License This project is licensed under the MIT License. You are free to use, modify, and distribute this project under the terms of the license. See the LICENSE file for details.","title":"License"},{"location":"license/#license","text":"This project is licensed under the MIT License. You are free to use, modify, and distribute this project under the terms of the license. See the LICENSE file for details.","title":"License"},{"location":"usage/","text":"Running the Script Ensure your .env file is configured correctly. Run the script: python python/sbom_fetcher.py Script Workflow Verifies or creates the required PostgreSQL table ( sbom_data ). Scans the repositories of the specified GitHub owner for the required files ( package.json , requirements.txt ). Fetches SBOM data for repositories containing the required files. Saves the SBOM data in the PostgreSQL database. Expected Output Logs indicating progress, such as: \"Scanning completed for page X\" \"SBOM stored in the database with ID: X\" Remaining rate limit at the end of the script.","title":"Usage"},{"location":"usage/#running-the-script","text":"Ensure your .env file is configured correctly. Run the script: python python/sbom_fetcher.py","title":"Running the Script"},{"location":"usage/#script-workflow","text":"Verifies or creates the required PostgreSQL table ( sbom_data ). Scans the repositories of the specified GitHub owner for the required files ( package.json , requirements.txt ). Fetches SBOM data for repositories containing the required files. Saves the SBOM data in the PostgreSQL database.","title":"Script Workflow"},{"location":"usage/#expected-output","text":"Logs indicating progress, such as: \"Scanning completed for page X\" \"SBOM stored in the database with ID: X\" Remaining rate limit at the end of the script.","title":"Expected Output"}]}